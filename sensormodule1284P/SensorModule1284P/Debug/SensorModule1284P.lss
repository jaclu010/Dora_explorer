
SensorModule1284P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000960  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800102  00800102  000009f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000840  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029d  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f4  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030f  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000023af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	39 01       	movw	r6, r18
  8e:	42 01       	movw	r8, r4
  90:	4b 01       	movw	r8, r22
  92:	54 01       	movw	r10, r8
  94:	5d 01       	movw	r10, r26
  96:	66 01       	movw	r12, r12
  98:	6a 01       	movw	r12, r20

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f9 e0       	ldi	r31, 0x09	; 9
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a2 30       	cpi	r26, 0x02	; 2
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a2 e0       	ldi	r26, 0x02	; 2
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 31       	cpi	r26, 0x10	; 16
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	e1 d1       	rcall	.+962    	; 0x494 <main>
  d2:	44 c4       	rjmp	.+2184   	; 0x95c <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <AD_Init>:
void FireFly_Transmit(unsigned data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	11 b8       	out	0x01, r1	; 1
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
  e6:	ac e7       	ldi	r26, 0x7C	; 124
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	8c 91       	ld	r24, X
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	8c 93       	st	X, r24
  f0:	8c 91       	ld	r24, X
  f2:	88 7f       	andi	r24, 0xF8	; 248
  f4:	8c 93       	st	X, r24
  f6:	80 81       	ld	r24, Z
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	80 83       	st	Z, r24
  fc:	cb e7       	ldi	r28, 0x7B	; 123
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	88 81       	ld	r24, Y
 102:	88 7f       	andi	r24, 0xF8	; 248
 104:	88 83       	st	Y, r24
 106:	8c 91       	ld	r24, X
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	8c 93       	st	X, r24
 10c:	80 81       	ld	r24, Z
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 83       	st	Z, r24
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <UART_Init>:
 11e:	e4 ec       	ldi	r30, 0xC4	; 196
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	11 82       	std	Z+1, r1	; 0x01
 124:	10 82       	st	Z, r1
 126:	a0 ec       	ldi	r26, 0xC0	; 192
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	8c 93       	st	X, r24
 130:	a1 ec       	ldi	r26, 0xC1	; 193
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	8c 91       	ld	r24, X
 136:	88 61       	ori	r24, 0x18	; 24
 138:	8c 93       	st	X, r24
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	91 83       	std	Z+1, r25	; 0x01
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <SPI_MasterInit>:
 144:	80 eb       	ldi	r24, 0xB0	; 176
 146:	84 b9       	out	0x04, r24	; 4
 148:	8d e5       	ldi	r24, 0x5D	; 93
 14a:	8c bd       	out	0x2c, r24	; 44
 14c:	08 95       	ret

0000014e <FireFly_Init>:
 14e:	ec ec       	ldi	r30, 0xCC	; 204
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	11 82       	std	Z+1, r1	; 0x01
 154:	10 82       	st	Z, r1
 156:	a8 ec       	ldi	r26, 0xC8	; 200
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	8c 91       	ld	r24, X
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	8c 93       	st	X, r24
 160:	a9 ec       	ldi	r26, 0xC9	; 201
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	8c 91       	ld	r24, X
 166:	88 61       	ori	r24, 0x18	; 24
 168:	8c 93       	st	X, r24
 16a:	8f e0       	ldi	r24, 0x0F	; 15
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <UART_Transmit>:
 174:	e0 ec       	ldi	r30, 0xC0	; 192
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	95 ff       	sbrs	r25, 5
 17c:	fd cf       	rjmp	.-6      	; 0x178 <UART_Transmit+0x4>
 17e:	80 93 c6 00 	sts	0x00C6, r24
 182:	08 95       	ret

00000184 <SPI_MasterTransmit>:
 184:	8e bd       	out	0x2e, r24	; 46
 186:	0d b4       	in	r0, 0x2d	; 45
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <SPI_MasterTransmit+0x2>
 18c:	08 95       	ret

0000018e <FireFly_Receive>:

unsigned char FireFly_Receive()
{

	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) );
 18e:	e8 ec       	ldi	r30, 0xC8	; 200
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	ec f7       	brge	.-6      	; 0x192 <FireFly_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR1;
 198:	80 91 ce 00 	lds	r24, 0x00CE
}
 19c:	08 95       	ret

0000019e <Send_IR>:
/* Sends IR values in cm over UART */
void Send_IR() {	
	
	UART_Transmit(START_IR);
 19e:	8c e5       	ldi	r24, 0x5C	; 92
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	e8 df       	rcall	.-48     	; 0x174 <UART_Transmit>
	UART_Transmit(irArray[0]);
 1a4:	80 91 04 01 	lds	r24, 0x0104
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	e4 df       	rcall	.-56     	; 0x174 <UART_Transmit>
	UART_Transmit(irArray[1]);
 1ac:	80 91 05 01 	lds	r24, 0x0105
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	e0 df       	rcall	.-64     	; 0x174 <UART_Transmit>
	UART_Transmit(irArray[2]);
 1b4:	80 91 06 01 	lds	r24, 0x0106
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	dc df       	rcall	.-72     	; 0x174 <UART_Transmit>
	UART_Transmit(irArray[3]);
 1bc:	80 91 07 01 	lds	r24, 0x0107
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	d8 df       	rcall	.-80     	; 0x174 <UART_Transmit>
	UART_Transmit(irArray[4]);
 1c4:	80 91 08 01 	lds	r24, 0x0108
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	d4 df       	rcall	.-88     	; 0x174 <UART_Transmit>
	UART_Transmit(irArray[5]);
 1cc:	80 91 09 01 	lds	r24, 0x0109
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	d0 df       	rcall	.-96     	; 0x174 <UART_Transmit>
	
	sensor = GYRO_GO; // set sensor state to gyro
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 0a 01 	sts	0x010A, r24
 1da:	08 95       	ret

000001dc <Read_IR>:
	
}

/* Iterate through sensors and save readings */
void Read_IR() {
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	
	
	if(ir != IR_SEND) {
 1f0:	c0 91 0b 01 	lds	r28, 0x010B
 1f4:	c6 30       	cpi	r28, 0x06	; 6
 1f6:	71 f1       	breq	.+92     	; 0x254 <Read_IR+0x78>
		
		unsigned AD_VALUE = ADCH;
 1f8:	60 91 79 00 	lds	r22, 0x0079
		
		if(AD_VALUE > 22)
 1fc:	67 31       	cpi	r22, 0x17	; 23
 1fe:	28 f1       	brcs	.+74     	; 0x24a <Read_IR+0x6e>
			irArray[ir] = round((-4.935*AD_VALUE + 804.5) / (AD_VALUE + 9.051)); //convert sensor data to cm		
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	6a d2       	rcall	.+1236   	; 0x6dc <__floatunsisf>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
 20c:	25 e8       	ldi	r18, 0x85	; 133
 20e:	3b ee       	ldi	r19, 0xEB	; 235
 210:	4d e9       	ldi	r20, 0x9D	; 157
 212:	50 ec       	ldi	r21, 0xC0	; 192
 214:	f1 d2       	rcall	.+1506   	; 0x7f8 <__mulsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e2       	ldi	r19, 0x20	; 32
 21a:	49 e4       	ldi	r20, 0x49	; 73
 21c:	54 e4       	ldi	r21, 0x44	; 68
 21e:	66 d1       	rcall	.+716    	; 0x4ec <__addsf3>
 220:	4b 01       	movw	r8, r22
 222:	5c 01       	movw	r10, r24
 224:	25 ee       	ldi	r18, 0xE5	; 229
 226:	30 ed       	ldi	r19, 0xD0	; 208
 228:	40 e1       	ldi	r20, 0x10	; 16
 22a:	51 e4       	ldi	r21, 0x41	; 65
 22c:	c7 01       	movw	r24, r14
 22e:	b6 01       	movw	r22, r12
 230:	5d d1       	rcall	.+698    	; 0x4ec <__addsf3>
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	c5 01       	movw	r24, r10
 238:	b4 01       	movw	r22, r8
 23a:	bc d1       	rcall	.+888    	; 0x5b4 <__divsf3>
 23c:	40 d3       	rcall	.+1664   	; 0x8be <round>
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	cc 5f       	subi	r28, 0xFC	; 252
 242:	de 4f       	sbci	r29, 0xFE	; 254
 244:	1f d2       	rcall	.+1086   	; 0x684 <__fixunssfsi>
 246:	68 83       	st	Y, r22
 248:	05 c0       	rjmp	.+10     	; 0x254 <Read_IR+0x78>
		else
			irArray[ir] = 25; // if invalid ir value set distance to 25cm
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	cc 5f       	subi	r28, 0xFC	; 252
 24e:	de 4f       	sbci	r29, 0xFE	; 254
 250:	89 e1       	ldi	r24, 0x19	; 25
 252:	88 83       	st	Y, r24
			
	}
	
	ADMUX &= 0xF8; // reset ADMUX
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	88 7f       	andi	r24, 0xF8	; 248
 25c:	80 83       	st	Z, r24
	
	switch (ir)
 25e:	80 91 0b 01 	lds	r24, 0x010B
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	87 30       	cpi	r24, 0x07	; 7
 266:	91 05       	cpc	r25, r1
 268:	c0 f5       	brcc	.+112    	; 0x2da <Read_IR+0xfe>
 26a:	fc 01       	movw	r30, r24
 26c:	ea 5b       	subi	r30, 0xBA	; 186
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	6f c3       	rjmp	.+1758   	; 0x950 <__tablejump2__>
	{
		case IR_ONE:
			ADMUX |= (1 << MUX0); // set ADMUX to read the next sensor
 272:	ec e7       	ldi	r30, 0x7C	; 124
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	80 83       	st	Z, r24
			ir = IR_TWO; // go to next state
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 0b 01 	sts	0x010B, r24
		break;
 282:	2b c0       	rjmp	.+86     	; 0x2da <Read_IR+0xfe>
		case IR_TWO:
			ADMUX |= (1 << MUX1);
 284:	ec e7       	ldi	r30, 0x7C	; 124
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	80 83       	st	Z, r24
			ir = IR_THREE;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	80 93 0b 01 	sts	0x010B, r24
		break;
 294:	22 c0       	rjmp	.+68     	; 0x2da <Read_IR+0xfe>
		
		case IR_THREE:
			ADMUX |= (1 << MUX1) | (1 << MUX0);
 296:	ec e7       	ldi	r30, 0x7C	; 124
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	83 60       	ori	r24, 0x03	; 3
 29e:	80 83       	st	Z, r24
			ir = IR_FOUR;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	80 93 0b 01 	sts	0x010B, r24
		break;
 2a6:	19 c0       	rjmp	.+50     	; 0x2da <Read_IR+0xfe>
		
		case IR_FOUR:
			ADMUX |= (1 << MUX2);
 2a8:	ec e7       	ldi	r30, 0x7C	; 124
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	84 60       	ori	r24, 0x04	; 4
 2b0:	80 83       	st	Z, r24
			ir = IR_FIVE;
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	80 93 0b 01 	sts	0x010B, r24
		break;
 2b8:	10 c0       	rjmp	.+32     	; 0x2da <Read_IR+0xfe>
		
		case IR_FIVE:
			ADMUX |= (1 << MUX2) | (1 << MUX0);
 2ba:	ec e7       	ldi	r30, 0x7C	; 124
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	85 60       	ori	r24, 0x05	; 5
 2c2:	80 83       	st	Z, r24
			ir = IR_SIX;
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	80 93 0b 01 	sts	0x010B, r24
		break;
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <Read_IR+0xfe>
		
		case IR_SIX:
			ir = IR_SEND;
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	80 93 0b 01 	sts	0x010B, r24
		break;
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <Read_IR+0xfe>
		
		case IR_SEND:
			Send_IR();
 2d4:	64 df       	rcall	.-312    	; 0x19e <Send_IR>
			ir = IR_ONE;
 2d6:	10 92 0b 01 	sts	0x010B, r1
		break;
		
	}
	
	
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	9f 90       	pop	r9
 2ec:	8f 90       	pop	r8
 2ee:	08 95       	ret

000002f0 <StartSignal_Gyro>:

/* Pull SS low */
void StartSignal_Gyro() {
	
	PORTB &= (0 << PORTB4);
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	15 b8       	out	0x05, r1	; 5
 2f4:	08 95       	ret

000002f6 <StopSignal_Gyro>:
}

/* Pull SS high */
void StopSignal_Gyro() {
	
	PORTB |= (1 << PORTB4);
 2f6:	2c 9a       	sbi	0x05, 4	; 5
 2f8:	08 95       	ret

000002fa <Read_Gyro>:
	
}

/* Starts Gyro conversation and saves the result */
void Read_Gyro()
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	
	unsigned output;
	unsigned answerHigh;
	unsigned answerLow;
	
	switch(gyro) {		
 2fe:	80 91 00 01 	lds	r24, 0x0100
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	e1 f0       	breq	.+56     	; 0x33e <Read_Gyro+0x44>
 306:	38 f0       	brcs	.+14     	; 0x316 <Read_Gyro+0x1c>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	09 f4       	brne	.+2      	; 0x30e <Read_Gyro+0x14>
 30c:	4d c0       	rjmp	.+154    	; 0x3a8 <Read_Gyro+0xae>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <Read_Gyro+0x1a>
 312:	5c c0       	rjmp	.+184    	; 0x3cc <Read_Gyro+0xd2>
 314:	6c c0       	rjmp	.+216    	; 0x3ee <Read_Gyro+0xf4>
		
		case GYRO_ONE: // Start a reading

			StartSignal_Gyro();
 316:	ec df       	rcall	.-40     	; 0x2f0 <StartSignal_Gyro>

			output = 0x94;
			SPI_MasterTransmit(output);
 318:	84 e9       	ldi	r24, 0x94	; 148
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	33 df       	rcall	.-410    	; 0x184 <SPI_MasterTransmit>
			
			output = 0x00;			
			SPI_MasterTransmit(output);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	30 df       	rcall	.-416    	; 0x184 <SPI_MasterTransmit>
			answerHigh = SPDR;
 324:	ce b5       	in	r28, 0x2e	; 46
				
			SPI_MasterTransmit(output);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	2c df       	rcall	.-424    	; 0x184 <SPI_MasterTransmit>
			answerLow = SPDR;
 32c:	8e b5       	in	r24, 0x2e	; 46
			
			StopSignal_Gyro();
 32e:	e3 df       	rcall	.-58     	; 0x2f6 <StopSignal_Gyro>
				
			answerHigh &= 0x80;
			
			if(answerHigh == 0)
 330:	cc 23       	and	r28, r28
 332:	0c f4       	brge	.+2      	; 0x336 <Read_Gyro+0x3c>
 334:	5c c0       	rjmp	.+184    	; 0x3ee <Read_Gyro+0xf4>
				gyro = GYRO_TWO;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 00 01 	sts	0x0100, r24
 33c:	58 c0       	rjmp	.+176    	; 0x3ee <Read_Gyro+0xf4>
	
		break;
		
		case GYRO_TWO: // Get and save the result
		
			StartSignal_Gyro();
 33e:	d8 df       	rcall	.-80     	; 0x2f0 <StartSignal_Gyro>
			
			output = 0x80;
			SPI_MasterTransmit(output);
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	1f df       	rcall	.-450    	; 0x184 <SPI_MasterTransmit>
			
			output = 0x00;			
			SPI_MasterTransmit(output);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	1c df       	rcall	.-456    	; 0x184 <SPI_MasterTransmit>
			answerHigh = SPDR;
 34c:	ce b5       	in	r28, 0x2e	; 46
			
			SPI_MasterTransmit(output);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	18 df       	rcall	.-464    	; 0x184 <SPI_MasterTransmit>
			answerLow = SPDR;
 354:	de b5       	in	r29, 0x2e	; 46
			
			StopSignal_Gyro();
 356:	cf df       	rcall	.-98     	; 0x2f6 <StopSignal_Gyro>

			unsigned checkEOC = answerHigh & 0x20;
			unsigned checkAcc = answerHigh & 0x80;
						
			if (checkEOC == 0x20) {
 358:	c5 ff       	sbrs	r28, 5
 35a:	23 c0       	rjmp	.+70     	; 0x3a2 <Read_Gyro+0xa8>
							
				if(checkAcc == 0) {
 35c:	cc 23       	and	r28, r28
 35e:	f4 f0       	brlt	.+60     	; 0x39c <Read_Gyro+0xa2>
			output = 0x80;
			SPI_MasterTransmit(output);
			
			output = 0x00;			
			SPI_MasterTransmit(output);
			answerHigh = SPDR;
 360:	8c 2f       	mov	r24, r28
 362:	90 e0       	ldi	r25, 0x00	; 0
			
			SPI_MasterTransmit(output);
			answerLow = SPDR;
 364:	4d 2f       	mov	r20, r29
 366:	50 e0       	ldi	r21, 0x00	; 0
				if(checkAcc == 0) {
					
					sendLow = answerHigh & 0x01;
					sendLow = (answerHigh << 7);
					unsigned temp = (answerLow >> 1);
					temp &= 0x7F;
 368:	56 95       	lsr	r21
 36a:	47 95       	ror	r20
			if (checkEOC == 0x20) {
							
				if(checkAcc == 0) {
					
					sendLow = answerHigh & 0x01;
					sendLow = (answerHigh << 7);
 36c:	9c 01       	movw	r18, r24
 36e:	36 95       	lsr	r19
 370:	32 2f       	mov	r19, r18
 372:	22 27       	eor	r18, r18
 374:	37 95       	ror	r19
 376:	27 95       	ror	r18
					unsigned temp = (answerLow >> 1);
					temp &= 0x7F;
					sendLow = sendLow | temp;
 378:	24 2b       	or	r18, r20
 37a:	35 2b       	or	r19, r21
 37c:	30 93 0d 01 	sts	0x010D, r19
 380:	20 93 0c 01 	sts	0x010C, r18
					sendHigh = (answerHigh >> 1);
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
					sendHigh &= 0x07;
 388:	87 70       	andi	r24, 0x07	; 7
 38a:	99 27       	eor	r25, r25
 38c:	90 93 0f 01 	sts	0x010F, r25
 390:	80 93 0e 01 	sts	0x010E, r24
					
					gyro = GYRO_SEND;
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 93 00 01 	sts	0x0100, r24
 39a:	29 c0       	rjmp	.+82     	; 0x3ee <Read_Gyro+0xf4>
				}
				
				else
					gyro = GYRO_ONE;
 39c:	10 92 00 01 	sts	0x0100, r1
 3a0:	26 c0       	rjmp	.+76     	; 0x3ee <Read_Gyro+0xf4>
			}
			
			else
				gyro = GYRO_ONE;
 3a2:	10 92 00 01 	sts	0x0100, r1
 3a6:	23 c0       	rjmp	.+70     	; 0x3ee <Read_Gyro+0xf4>
		
		break;
		
		case GYRO_SEND: // Send the result over UART

			UART_Transmit(START_GYRO);
 3a8:	8e e5       	ldi	r24, 0x5E	; 94
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	e3 de       	rcall	.-570    	; 0x174 <UART_Transmit>
			UART_Transmit(sendHigh);
 3ae:	80 91 0e 01 	lds	r24, 0x010E
 3b2:	90 91 0f 01 	lds	r25, 0x010F
 3b6:	de de       	rcall	.-580    	; 0x174 <UART_Transmit>
			UART_Transmit(sendLow);
 3b8:	80 91 0c 01 	lds	r24, 0x010C
 3bc:	90 91 0d 01 	lds	r25, 0x010D
 3c0:	d9 de       	rcall	.-590    	; 0x174 <UART_Transmit>
			
			gyro = GYRO_ONE;
 3c2:	10 92 00 01 	sts	0x0100, r1
			sensor = IR_GO;
 3c6:	10 92 0a 01 	sts	0x010A, r1
		break;
 3ca:	11 c0       	rjmp	.+34     	; 0x3ee <Read_Gyro+0xf4>
		
		case GYRO_INIT: // Turn the Gyro on		
			output = 0x94;
			SPI_MasterTransmit(output);
 3cc:	84 e9       	ldi	r24, 0x94	; 148
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	d9 de       	rcall	.-590    	; 0x184 <SPI_MasterTransmit>
			
			output = 0x00;
			SPI_MasterTransmit(output);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	d6 de       	rcall	.-596    	; 0x184 <SPI_MasterTransmit>
			answerHigh = SPDR;
 3d8:	8e b5       	in	r24, 0x2e	; 46

			SPI_MasterTransmit(output);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	d2 de       	rcall	.-604    	; 0x184 <SPI_MasterTransmit>
			answerLow = SPDR;
 3e0:	8e b5       	in	r24, 0x2e	; 46
			
			StopSignal_Gyro();
 3e2:	89 df       	rcall	.-238    	; 0x2f6 <StopSignal_Gyro>
			
			UART_Transmit(0xFE);
 3e4:	8e ef       	ldi	r24, 0xFE	; 254
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	c5 de       	rcall	.-630    	; 0x174 <UART_Transmit>
			
			gyro = GYRO_ONE;
 3ea:	10 92 00 01 	sts	0x0100, r1
		default:
		break;
		
	}
	
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <Sync_Laser>:
void Sync_Laser()
{
		unsigned char sync = 0x00;
		while (1){
			
			sync = FireFly_Receive();
 3f4:	cc de       	rcall	.-616    	; 0x18e <FireFly_Receive>
			
			if (sync == START_LASER)				
 3f6:	8d 35       	cpi	r24, 0x5D	; 93
 3f8:	e9 f7       	brne	.-6      	; 0x3f4 <Sync_Laser>
				break;
			
		}
}
 3fa:	08 95       	ret

000003fc <Read_Laser>:

/* Receive laser reading via bluetooth and transmit it over UART */
void Read_Laser() {
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29

	Sync_Laser(); // wait for start id byte to be sent
 404:	f7 df       	rcall	.-18     	; 0x3f4 <Sync_Laser>
		
	
	unsigned char high = FireFly_Receive();
 406:	c3 de       	rcall	.-634    	; 0x18e <FireFly_Receive>
 408:	c8 2f       	mov	r28, r24
	
	UART_Transmit(START_LASER);
 40a:	8d e5       	ldi	r24, 0x5D	; 93
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	b2 de       	rcall	.-668    	; 0x174 <UART_Transmit>
	UART_Transmit(high);
 410:	8c 2f       	mov	r24, r28
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	af de       	rcall	.-674    	; 0x174 <UART_Transmit>
	
	if(high == 0xFF) { // if stop byte is received, send it and number of laser readings
 416:	cf 3f       	cpi	r28, 0xFF	; 255
 418:	21 f5       	brne	.+72     	; 0x462 <Read_Laser+0x66>
		
		unsigned highCounter = FireFly_Receive();
 41a:	b9 de       	rcall	.-654    	; 0x18e <FireFly_Receive>
 41c:	c8 2f       	mov	r28, r24
 41e:	d0 e0       	ldi	r29, 0x00	; 0
		unsigned lowCounter = FireFly_Receive();		
 420:	b6 de       	rcall	.-660    	; 0x18e <FireFly_Receive>
 422:	08 2f       	mov	r16, r24
 424:	10 e0       	ldi	r17, 0x00	; 0

		unsigned laserCounter = (highCounter << 8);
 426:	9c 2f       	mov	r25, r28
 428:	88 27       	eor	r24, r24
		laserCounter |= lowCounter;
 42a:	80 2b       	or	r24, r16
 42c:	91 2b       	or	r25, r17
		
		UART_Transmit(abs(laserCounter-counter));
 42e:	20 91 02 01 	lds	r18, 0x0102
 432:	30 91 03 01 	lds	r19, 0x0103
 436:	82 1b       	sub	r24, r18
 438:	93 0b       	sbc	r25, r19
 43a:	9c 01       	movw	r18, r24
 43c:	22 f4       	brpl	.+8      	; 0x446 <Read_Laser+0x4a>
 43e:	22 27       	eor	r18, r18
 440:	33 27       	eor	r19, r19
 442:	28 1b       	sub	r18, r24
 444:	39 0b       	sbc	r19, r25
 446:	c9 01       	movw	r24, r18
 448:	95 de       	rcall	.-726    	; 0x174 <UART_Transmit>
		UART_Transmit(highCounter);
 44a:	ce 01       	movw	r24, r28
 44c:	93 de       	rcall	.-730    	; 0x174 <UART_Transmit>
		UART_Transmit(lowCounter);
 44e:	c8 01       	movw	r24, r16
 450:	91 de       	rcall	.-734    	; 0x174 <UART_Transmit>
		
		counter = 0;
 452:	10 92 03 01 	sts	0x0103, r1
 456:	10 92 02 01 	sts	0x0102, r1
		sensor = NONE; // disable ir or gyro sensor reading for next loop to avoid missing first laser value
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	80 93 0a 01 	sts	0x010A, r24
 460:	14 c0       	rjmp	.+40     	; 0x48a <Read_Laser+0x8e>
		
	}
	else {
		
		unsigned char low = FireFly_Receive();
 462:	95 de       	rcall	.-726    	; 0x18e <FireFly_Receive>
	
		UART_Transmit(low);
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	86 de       	rcall	.-756    	; 0x174 <UART_Transmit>
		counter++;
 468:	80 91 02 01 	lds	r24, 0x0102
 46c:	90 91 03 01 	lds	r25, 0x0103
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	90 93 03 01 	sts	0x0103, r25
 476:	80 93 02 01 	sts	0x0102, r24
		if(sensor == NONE){ // enable ir sensor reading after first value is received
 47a:	80 91 0a 01 	lds	r24, 0x010A
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	21 f4       	brne	.+8      	; 0x48a <Read_Laser+0x8e>
			sensor = IR_GO;
 482:	10 92 0a 01 	sts	0x010A, r1
			ir = IR_ONE;
 486:	10 92 0b 01 	sts	0x010B, r1
		}
	}

}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <main>:


int main(void)
{
	UART_Init();
 494:	44 de       	rcall	.-888    	; 0x11e <UART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	8f e7       	ldi	r24, 0x7F	; 127
 49a:	94 e0       	ldi	r25, 0x04	; 4
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <main+0x8>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x12>
 4a6:	00 00       	nop
	_delay_ms(100);
	FireFly_Init();
 4a8:	52 de       	rcall	.-860    	; 0x14e <FireFly_Init>
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	8f e7       	ldi	r24, 0x7F	; 127
 4ae:	94 e0       	ldi	r25, 0x04	; 4
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <main+0x1c>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <main+0x26>
 4ba:	00 00       	nop
	_delay_ms(100);
	AD_Init();
 4bc:	0c de       	rcall	.-1000   	; 0xd6 <AD_Init>
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	8f e7       	ldi	r24, 0x7F	; 127
 4c2:	94 e0       	ldi	r25, 0x04	; 4
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0x30>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0x3a>
 4ce:	00 00       	nop
	_delay_ms(100);
	SPI_MasterInit();
 4d0:	39 de       	rcall	.-910    	; 0x144 <SPI_MasterInit>
	
	
	while(1) {		
		
		Read_Laser();
 4d2:	94 df       	rcall	.-216    	; 0x3fc <Read_Laser>
		
		if(sensor == GYRO_GO)
 4d4:	80 91 0a 01 	lds	r24, 0x010A
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	09 f4       	brne	.+2      	; 0x4de <main+0x4a>
			Read_Gyro();
 4dc:	0e df       	rcall	.-484    	; 0x2fa <Read_Gyro>
		if(sensor == IR_GO)
 4de:	80 91 0a 01 	lds	r24, 0x010A
 4e2:	81 11       	cpse	r24, r1
 4e4:	f6 cf       	rjmp	.-20     	; 0x4d2 <main+0x3e>
			Read_IR();
 4e6:	7a de       	rcall	.-780    	; 0x1dc <Read_IR>
 4e8:	f4 cf       	rjmp	.-24     	; 0x4d2 <main+0x3e>

000004ea <__subsf3>:
 4ea:	50 58       	subi	r21, 0x80	; 128

000004ec <__addsf3>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	aa 27       	eor	r26, r26
 4f0:	0e d0       	rcall	.+28     	; 0x50e <__addsf3x>
 4f2:	48 c1       	rjmp	.+656    	; 0x784 <__fp_round>
 4f4:	39 d1       	rcall	.+626    	; 0x768 <__fp_pscA>
 4f6:	30 f0       	brcs	.+12     	; 0x504 <__addsf3+0x18>
 4f8:	3e d1       	rcall	.+636    	; 0x776 <__fp_pscB>
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__addsf3+0x18>
 4fc:	31 f4       	brne	.+12     	; 0x50a <__addsf3+0x1e>
 4fe:	9f 3f       	cpi	r25, 0xFF	; 255
 500:	11 f4       	brne	.+4      	; 0x506 <__addsf3+0x1a>
 502:	1e f4       	brtc	.+6      	; 0x50a <__addsf3+0x1e>
 504:	2e c1       	rjmp	.+604    	; 0x762 <__fp_nan>
 506:	0e f4       	brtc	.+2      	; 0x50a <__addsf3+0x1e>
 508:	e0 95       	com	r30
 50a:	e7 fb       	bst	r30, 7
 50c:	24 c1       	rjmp	.+584    	; 0x756 <__fp_inf>

0000050e <__addsf3x>:
 50e:	e9 2f       	mov	r30, r25
 510:	4a d1       	rcall	.+660    	; 0x7a6 <__fp_split3>
 512:	80 f3       	brcs	.-32     	; 0x4f4 <__addsf3+0x8>
 514:	ba 17       	cp	r27, r26
 516:	62 07       	cpc	r22, r18
 518:	73 07       	cpc	r23, r19
 51a:	84 07       	cpc	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	18 f0       	brcs	.+6      	; 0x526 <__addsf3x+0x18>
 520:	71 f4       	brne	.+28     	; 0x53e <__addsf3x+0x30>
 522:	9e f5       	brtc	.+102    	; 0x58a <__addsf3x+0x7c>
 524:	62 c1       	rjmp	.+708    	; 0x7ea <__fp_zero>
 526:	0e f4       	brtc	.+2      	; 0x52a <__addsf3x+0x1c>
 528:	e0 95       	com	r30
 52a:	0b 2e       	mov	r0, r27
 52c:	ba 2f       	mov	r27, r26
 52e:	a0 2d       	mov	r26, r0
 530:	0b 01       	movw	r0, r22
 532:	b9 01       	movw	r22, r18
 534:	90 01       	movw	r18, r0
 536:	0c 01       	movw	r0, r24
 538:	ca 01       	movw	r24, r20
 53a:	a0 01       	movw	r20, r0
 53c:	11 24       	eor	r1, r1
 53e:	ff 27       	eor	r31, r31
 540:	59 1b       	sub	r21, r25
 542:	99 f0       	breq	.+38     	; 0x56a <__addsf3x+0x5c>
 544:	59 3f       	cpi	r21, 0xF9	; 249
 546:	50 f4       	brcc	.+20     	; 0x55c <__addsf3x+0x4e>
 548:	50 3e       	cpi	r21, 0xE0	; 224
 54a:	68 f1       	brcs	.+90     	; 0x5a6 <__addsf3x+0x98>
 54c:	1a 16       	cp	r1, r26
 54e:	f0 40       	sbci	r31, 0x00	; 0
 550:	a2 2f       	mov	r26, r18
 552:	23 2f       	mov	r18, r19
 554:	34 2f       	mov	r19, r20
 556:	44 27       	eor	r20, r20
 558:	58 5f       	subi	r21, 0xF8	; 248
 55a:	f3 cf       	rjmp	.-26     	; 0x542 <__addsf3x+0x34>
 55c:	46 95       	lsr	r20
 55e:	37 95       	ror	r19
 560:	27 95       	ror	r18
 562:	a7 95       	ror	r26
 564:	f0 40       	sbci	r31, 0x00	; 0
 566:	53 95       	inc	r21
 568:	c9 f7       	brne	.-14     	; 0x55c <__addsf3x+0x4e>
 56a:	7e f4       	brtc	.+30     	; 0x58a <__addsf3x+0x7c>
 56c:	1f 16       	cp	r1, r31
 56e:	ba 0b       	sbc	r27, r26
 570:	62 0b       	sbc	r22, r18
 572:	73 0b       	sbc	r23, r19
 574:	84 0b       	sbc	r24, r20
 576:	ba f0       	brmi	.+46     	; 0x5a6 <__addsf3x+0x98>
 578:	91 50       	subi	r25, 0x01	; 1
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <__addsf3x+0x96>
 57c:	ff 0f       	add	r31, r31
 57e:	bb 1f       	adc	r27, r27
 580:	66 1f       	adc	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	c2 f7       	brpl	.-16     	; 0x578 <__addsf3x+0x6a>
 588:	0e c0       	rjmp	.+28     	; 0x5a6 <__addsf3x+0x98>
 58a:	ba 0f       	add	r27, r26
 58c:	62 1f       	adc	r22, r18
 58e:	73 1f       	adc	r23, r19
 590:	84 1f       	adc	r24, r20
 592:	48 f4       	brcc	.+18     	; 0x5a6 <__addsf3x+0x98>
 594:	87 95       	ror	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b7 95       	ror	r27
 59c:	f7 95       	ror	r31
 59e:	9e 3f       	cpi	r25, 0xFE	; 254
 5a0:	08 f0       	brcs	.+2      	; 0x5a4 <__addsf3x+0x96>
 5a2:	b3 cf       	rjmp	.-154    	; 0x50a <__addsf3+0x1e>
 5a4:	93 95       	inc	r25
 5a6:	88 0f       	add	r24, r24
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <__addsf3x+0x9e>
 5aa:	99 27       	eor	r25, r25
 5ac:	ee 0f       	add	r30, r30
 5ae:	97 95       	ror	r25
 5b0:	87 95       	ror	r24
 5b2:	08 95       	ret

000005b4 <__divsf3>:
 5b4:	0c d0       	rcall	.+24     	; 0x5ce <__divsf3x>
 5b6:	e6 c0       	rjmp	.+460    	; 0x784 <__fp_round>
 5b8:	de d0       	rcall	.+444    	; 0x776 <__fp_pscB>
 5ba:	40 f0       	brcs	.+16     	; 0x5cc <__divsf3+0x18>
 5bc:	d5 d0       	rcall	.+426    	; 0x768 <__fp_pscA>
 5be:	30 f0       	brcs	.+12     	; 0x5cc <__divsf3+0x18>
 5c0:	21 f4       	brne	.+8      	; 0x5ca <__divsf3+0x16>
 5c2:	5f 3f       	cpi	r21, 0xFF	; 255
 5c4:	19 f0       	breq	.+6      	; 0x5cc <__divsf3+0x18>
 5c6:	c7 c0       	rjmp	.+398    	; 0x756 <__fp_inf>
 5c8:	51 11       	cpse	r21, r1
 5ca:	10 c1       	rjmp	.+544    	; 0x7ec <__fp_szero>
 5cc:	ca c0       	rjmp	.+404    	; 0x762 <__fp_nan>

000005ce <__divsf3x>:
 5ce:	eb d0       	rcall	.+470    	; 0x7a6 <__fp_split3>
 5d0:	98 f3       	brcs	.-26     	; 0x5b8 <__divsf3+0x4>

000005d2 <__divsf3_pse>:
 5d2:	99 23       	and	r25, r25
 5d4:	c9 f3       	breq	.-14     	; 0x5c8 <__divsf3+0x14>
 5d6:	55 23       	and	r21, r21
 5d8:	b1 f3       	breq	.-20     	; 0x5c6 <__divsf3+0x12>
 5da:	95 1b       	sub	r25, r21
 5dc:	55 0b       	sbc	r21, r21
 5de:	bb 27       	eor	r27, r27
 5e0:	aa 27       	eor	r26, r26
 5e2:	62 17       	cp	r22, r18
 5e4:	73 07       	cpc	r23, r19
 5e6:	84 07       	cpc	r24, r20
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__divsf3_pse+0x26>
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	22 0f       	add	r18, r18
 5f0:	33 1f       	adc	r19, r19
 5f2:	44 1f       	adc	r20, r20
 5f4:	aa 1f       	adc	r26, r26
 5f6:	a9 f3       	breq	.-22     	; 0x5e2 <__divsf3_pse+0x10>
 5f8:	33 d0       	rcall	.+102    	; 0x660 <__divsf3_pse+0x8e>
 5fa:	0e 2e       	mov	r0, r30
 5fc:	3a f0       	brmi	.+14     	; 0x60c <__divsf3_pse+0x3a>
 5fe:	e0 e8       	ldi	r30, 0x80	; 128
 600:	30 d0       	rcall	.+96     	; 0x662 <__divsf3_pse+0x90>
 602:	91 50       	subi	r25, 0x01	; 1
 604:	50 40       	sbci	r21, 0x00	; 0
 606:	e6 95       	lsr	r30
 608:	00 1c       	adc	r0, r0
 60a:	ca f7       	brpl	.-14     	; 0x5fe <__divsf3_pse+0x2c>
 60c:	29 d0       	rcall	.+82     	; 0x660 <__divsf3_pse+0x8e>
 60e:	fe 2f       	mov	r31, r30
 610:	27 d0       	rcall	.+78     	; 0x660 <__divsf3_pse+0x8e>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	bb 1f       	adc	r27, r27
 61a:	26 17       	cp	r18, r22
 61c:	37 07       	cpc	r19, r23
 61e:	48 07       	cpc	r20, r24
 620:	ab 07       	cpc	r26, r27
 622:	b0 e8       	ldi	r27, 0x80	; 128
 624:	09 f0       	breq	.+2      	; 0x628 <__divsf3_pse+0x56>
 626:	bb 0b       	sbc	r27, r27
 628:	80 2d       	mov	r24, r0
 62a:	bf 01       	movw	r22, r30
 62c:	ff 27       	eor	r31, r31
 62e:	93 58       	subi	r25, 0x83	; 131
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	2a f0       	brmi	.+10     	; 0x63e <__divsf3_pse+0x6c>
 634:	9e 3f       	cpi	r25, 0xFE	; 254
 636:	51 05       	cpc	r21, r1
 638:	68 f0       	brcs	.+26     	; 0x654 <__divsf3_pse+0x82>
 63a:	8d c0       	rjmp	.+282    	; 0x756 <__fp_inf>
 63c:	d7 c0       	rjmp	.+430    	; 0x7ec <__fp_szero>
 63e:	5f 3f       	cpi	r21, 0xFF	; 255
 640:	ec f3       	brlt	.-6      	; 0x63c <__divsf3_pse+0x6a>
 642:	98 3e       	cpi	r25, 0xE8	; 232
 644:	dc f3       	brlt	.-10     	; 0x63c <__divsf3_pse+0x6a>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b7 95       	ror	r27
 64e:	f7 95       	ror	r31
 650:	9f 5f       	subi	r25, 0xFF	; 255
 652:	c9 f7       	brne	.-14     	; 0x646 <__divsf3_pse+0x74>
 654:	88 0f       	add	r24, r24
 656:	91 1d       	adc	r25, r1
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret
 660:	e1 e0       	ldi	r30, 0x01	; 1
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	bb 1f       	adc	r27, r27
 66a:	62 17       	cp	r22, r18
 66c:	73 07       	cpc	r23, r19
 66e:	84 07       	cpc	r24, r20
 670:	ba 07       	cpc	r27, r26
 672:	20 f0       	brcs	.+8      	; 0x67c <__divsf3_pse+0xaa>
 674:	62 1b       	sub	r22, r18
 676:	73 0b       	sbc	r23, r19
 678:	84 0b       	sbc	r24, r20
 67a:	ba 0b       	sbc	r27, r26
 67c:	ee 1f       	adc	r30, r30
 67e:	88 f7       	brcc	.-30     	; 0x662 <__divsf3_pse+0x90>
 680:	e0 95       	com	r30
 682:	08 95       	ret

00000684 <__fixunssfsi>:
 684:	98 d0       	rcall	.+304    	; 0x7b6 <__fp_splitA>
 686:	88 f0       	brcs	.+34     	; 0x6aa <__fixunssfsi+0x26>
 688:	9f 57       	subi	r25, 0x7F	; 127
 68a:	90 f0       	brcs	.+36     	; 0x6b0 <__fixunssfsi+0x2c>
 68c:	b9 2f       	mov	r27, r25
 68e:	99 27       	eor	r25, r25
 690:	b7 51       	subi	r27, 0x17	; 23
 692:	a0 f0       	brcs	.+40     	; 0x6bc <__fixunssfsi+0x38>
 694:	d1 f0       	breq	.+52     	; 0x6ca <__fixunssfsi+0x46>
 696:	66 0f       	add	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	1a f0       	brmi	.+6      	; 0x6a6 <__fixunssfsi+0x22>
 6a0:	ba 95       	dec	r27
 6a2:	c9 f7       	brne	.-14     	; 0x696 <__fixunssfsi+0x12>
 6a4:	12 c0       	rjmp	.+36     	; 0x6ca <__fixunssfsi+0x46>
 6a6:	b1 30       	cpi	r27, 0x01	; 1
 6a8:	81 f0       	breq	.+32     	; 0x6ca <__fixunssfsi+0x46>
 6aa:	9f d0       	rcall	.+318    	; 0x7ea <__fp_zero>
 6ac:	b1 e0       	ldi	r27, 0x01	; 1
 6ae:	08 95       	ret
 6b0:	9c c0       	rjmp	.+312    	; 0x7ea <__fp_zero>
 6b2:	67 2f       	mov	r22, r23
 6b4:	78 2f       	mov	r23, r24
 6b6:	88 27       	eor	r24, r24
 6b8:	b8 5f       	subi	r27, 0xF8	; 248
 6ba:	39 f0       	breq	.+14     	; 0x6ca <__fixunssfsi+0x46>
 6bc:	b9 3f       	cpi	r27, 0xF9	; 249
 6be:	cc f3       	brlt	.-14     	; 0x6b2 <__fixunssfsi+0x2e>
 6c0:	86 95       	lsr	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b3 95       	inc	r27
 6c8:	d9 f7       	brne	.-10     	; 0x6c0 <__fixunssfsi+0x3c>
 6ca:	3e f4       	brtc	.+14     	; 0x6da <__fixunssfsi+0x56>
 6cc:	90 95       	com	r25
 6ce:	80 95       	com	r24
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__floatunsisf>:
 6dc:	e8 94       	clt
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <__floatsisf+0x12>

000006e0 <__floatsisf>:
 6e0:	97 fb       	bst	r25, 7
 6e2:	3e f4       	brtc	.+14     	; 0x6f2 <__floatsisf+0x12>
 6e4:	90 95       	com	r25
 6e6:	80 95       	com	r24
 6e8:	70 95       	com	r23
 6ea:	61 95       	neg	r22
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	99 23       	and	r25, r25
 6f4:	a9 f0       	breq	.+42     	; 0x720 <__floatsisf+0x40>
 6f6:	f9 2f       	mov	r31, r25
 6f8:	96 e9       	ldi	r25, 0x96	; 150
 6fa:	bb 27       	eor	r27, r27
 6fc:	93 95       	inc	r25
 6fe:	f6 95       	lsr	r31
 700:	87 95       	ror	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b7 95       	ror	r27
 708:	f1 11       	cpse	r31, r1
 70a:	f8 cf       	rjmp	.-16     	; 0x6fc <__floatsisf+0x1c>
 70c:	fa f4       	brpl	.+62     	; 0x74c <__floatsisf+0x6c>
 70e:	bb 0f       	add	r27, r27
 710:	11 f4       	brne	.+4      	; 0x716 <__floatsisf+0x36>
 712:	60 ff       	sbrs	r22, 0
 714:	1b c0       	rjmp	.+54     	; 0x74c <__floatsisf+0x6c>
 716:	6f 5f       	subi	r22, 0xFF	; 255
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	8f 4f       	sbci	r24, 0xFF	; 255
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	16 c0       	rjmp	.+44     	; 0x74c <__floatsisf+0x6c>
 720:	88 23       	and	r24, r24
 722:	11 f0       	breq	.+4      	; 0x728 <__floatsisf+0x48>
 724:	96 e9       	ldi	r25, 0x96	; 150
 726:	11 c0       	rjmp	.+34     	; 0x74a <__floatsisf+0x6a>
 728:	77 23       	and	r23, r23
 72a:	21 f0       	breq	.+8      	; 0x734 <__floatsisf+0x54>
 72c:	9e e8       	ldi	r25, 0x8E	; 142
 72e:	87 2f       	mov	r24, r23
 730:	76 2f       	mov	r23, r22
 732:	05 c0       	rjmp	.+10     	; 0x73e <__floatsisf+0x5e>
 734:	66 23       	and	r22, r22
 736:	71 f0       	breq	.+28     	; 0x754 <__floatsisf+0x74>
 738:	96 e8       	ldi	r25, 0x86	; 134
 73a:	86 2f       	mov	r24, r22
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	2a f0       	brmi	.+10     	; 0x74c <__floatsisf+0x6c>
 742:	9a 95       	dec	r25
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	da f7       	brpl	.-10     	; 0x742 <__floatsisf+0x62>
 74c:	88 0f       	add	r24, r24
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret

00000756 <__fp_inf>:
 756:	97 f9       	bld	r25, 7
 758:	9f 67       	ori	r25, 0x7F	; 127
 75a:	80 e8       	ldi	r24, 0x80	; 128
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	08 95       	ret

00000762 <__fp_nan>:
 762:	9f ef       	ldi	r25, 0xFF	; 255
 764:	80 ec       	ldi	r24, 0xC0	; 192
 766:	08 95       	ret

00000768 <__fp_pscA>:
 768:	00 24       	eor	r0, r0
 76a:	0a 94       	dec	r0
 76c:	16 16       	cp	r1, r22
 76e:	17 06       	cpc	r1, r23
 770:	18 06       	cpc	r1, r24
 772:	09 06       	cpc	r0, r25
 774:	08 95       	ret

00000776 <__fp_pscB>:
 776:	00 24       	eor	r0, r0
 778:	0a 94       	dec	r0
 77a:	12 16       	cp	r1, r18
 77c:	13 06       	cpc	r1, r19
 77e:	14 06       	cpc	r1, r20
 780:	05 06       	cpc	r0, r21
 782:	08 95       	ret

00000784 <__fp_round>:
 784:	09 2e       	mov	r0, r25
 786:	03 94       	inc	r0
 788:	00 0c       	add	r0, r0
 78a:	11 f4       	brne	.+4      	; 0x790 <__fp_round+0xc>
 78c:	88 23       	and	r24, r24
 78e:	52 f0       	brmi	.+20     	; 0x7a4 <__fp_round+0x20>
 790:	bb 0f       	add	r27, r27
 792:	40 f4       	brcc	.+16     	; 0x7a4 <__fp_round+0x20>
 794:	bf 2b       	or	r27, r31
 796:	11 f4       	brne	.+4      	; 0x79c <__fp_round+0x18>
 798:	60 ff       	sbrs	r22, 0
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__fp_round+0x20>
 79c:	6f 5f       	subi	r22, 0xFF	; 255
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	08 95       	ret

000007a6 <__fp_split3>:
 7a6:	57 fd       	sbrc	r21, 7
 7a8:	90 58       	subi	r25, 0x80	; 128
 7aa:	44 0f       	add	r20, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	59 f0       	breq	.+22     	; 0x7c6 <__fp_splitA+0x10>
 7b0:	5f 3f       	cpi	r21, 0xFF	; 255
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <__fp_splitA+0x1a>
 7b4:	47 95       	ror	r20

000007b6 <__fp_splitA>:
 7b6:	88 0f       	add	r24, r24
 7b8:	97 fb       	bst	r25, 7
 7ba:	99 1f       	adc	r25, r25
 7bc:	61 f0       	breq	.+24     	; 0x7d6 <__fp_splitA+0x20>
 7be:	9f 3f       	cpi	r25, 0xFF	; 255
 7c0:	79 f0       	breq	.+30     	; 0x7e0 <__fp_splitA+0x2a>
 7c2:	87 95       	ror	r24
 7c4:	08 95       	ret
 7c6:	12 16       	cp	r1, r18
 7c8:	13 06       	cpc	r1, r19
 7ca:	14 06       	cpc	r1, r20
 7cc:	55 1f       	adc	r21, r21
 7ce:	f2 cf       	rjmp	.-28     	; 0x7b4 <__fp_split3+0xe>
 7d0:	46 95       	lsr	r20
 7d2:	f1 df       	rcall	.-30     	; 0x7b6 <__fp_splitA>
 7d4:	08 c0       	rjmp	.+16     	; 0x7e6 <__fp_splitA+0x30>
 7d6:	16 16       	cp	r1, r22
 7d8:	17 06       	cpc	r1, r23
 7da:	18 06       	cpc	r1, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	f1 cf       	rjmp	.-30     	; 0x7c2 <__fp_splitA+0xc>
 7e0:	86 95       	lsr	r24
 7e2:	71 05       	cpc	r23, r1
 7e4:	61 05       	cpc	r22, r1
 7e6:	08 94       	sec
 7e8:	08 95       	ret

000007ea <__fp_zero>:
 7ea:	e8 94       	clt

000007ec <__fp_szero>:
 7ec:	bb 27       	eor	r27, r27
 7ee:	66 27       	eor	r22, r22
 7f0:	77 27       	eor	r23, r23
 7f2:	cb 01       	movw	r24, r22
 7f4:	97 f9       	bld	r25, 7
 7f6:	08 95       	ret

000007f8 <__mulsf3>:
 7f8:	0b d0       	rcall	.+22     	; 0x810 <__mulsf3x>
 7fa:	c4 cf       	rjmp	.-120    	; 0x784 <__fp_round>
 7fc:	b5 df       	rcall	.-150    	; 0x768 <__fp_pscA>
 7fe:	28 f0       	brcs	.+10     	; 0x80a <__mulsf3+0x12>
 800:	ba df       	rcall	.-140    	; 0x776 <__fp_pscB>
 802:	18 f0       	brcs	.+6      	; 0x80a <__mulsf3+0x12>
 804:	95 23       	and	r25, r21
 806:	09 f0       	breq	.+2      	; 0x80a <__mulsf3+0x12>
 808:	a6 cf       	rjmp	.-180    	; 0x756 <__fp_inf>
 80a:	ab cf       	rjmp	.-170    	; 0x762 <__fp_nan>
 80c:	11 24       	eor	r1, r1
 80e:	ee cf       	rjmp	.-36     	; 0x7ec <__fp_szero>

00000810 <__mulsf3x>:
 810:	ca df       	rcall	.-108    	; 0x7a6 <__fp_split3>
 812:	a0 f3       	brcs	.-24     	; 0x7fc <__mulsf3+0x4>

00000814 <__mulsf3_pse>:
 814:	95 9f       	mul	r25, r21
 816:	d1 f3       	breq	.-12     	; 0x80c <__mulsf3+0x14>
 818:	95 0f       	add	r25, r21
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	55 1f       	adc	r21, r21
 81e:	62 9f       	mul	r22, r18
 820:	f0 01       	movw	r30, r0
 822:	72 9f       	mul	r23, r18
 824:	bb 27       	eor	r27, r27
 826:	f0 0d       	add	r31, r0
 828:	b1 1d       	adc	r27, r1
 82a:	63 9f       	mul	r22, r19
 82c:	aa 27       	eor	r26, r26
 82e:	f0 0d       	add	r31, r0
 830:	b1 1d       	adc	r27, r1
 832:	aa 1f       	adc	r26, r26
 834:	64 9f       	mul	r22, r20
 836:	66 27       	eor	r22, r22
 838:	b0 0d       	add	r27, r0
 83a:	a1 1d       	adc	r26, r1
 83c:	66 1f       	adc	r22, r22
 83e:	82 9f       	mul	r24, r18
 840:	22 27       	eor	r18, r18
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	62 1f       	adc	r22, r18
 848:	73 9f       	mul	r23, r19
 84a:	b0 0d       	add	r27, r0
 84c:	a1 1d       	adc	r26, r1
 84e:	62 1f       	adc	r22, r18
 850:	83 9f       	mul	r24, r19
 852:	a0 0d       	add	r26, r0
 854:	61 1d       	adc	r22, r1
 856:	22 1f       	adc	r18, r18
 858:	74 9f       	mul	r23, r20
 85a:	33 27       	eor	r19, r19
 85c:	a0 0d       	add	r26, r0
 85e:	61 1d       	adc	r22, r1
 860:	23 1f       	adc	r18, r19
 862:	84 9f       	mul	r24, r20
 864:	60 0d       	add	r22, r0
 866:	21 1d       	adc	r18, r1
 868:	82 2f       	mov	r24, r18
 86a:	76 2f       	mov	r23, r22
 86c:	6a 2f       	mov	r22, r26
 86e:	11 24       	eor	r1, r1
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	50 40       	sbci	r21, 0x00	; 0
 874:	8a f0       	brmi	.+34     	; 0x898 <__mulsf3_pse+0x84>
 876:	e1 f0       	breq	.+56     	; 0x8b0 <__mulsf3_pse+0x9c>
 878:	88 23       	and	r24, r24
 87a:	4a f0       	brmi	.+18     	; 0x88e <__mulsf3_pse+0x7a>
 87c:	ee 0f       	add	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	bb 1f       	adc	r27, r27
 882:	66 1f       	adc	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	a9 f7       	brne	.-22     	; 0x878 <__mulsf3_pse+0x64>
 88e:	9e 3f       	cpi	r25, 0xFE	; 254
 890:	51 05       	cpc	r21, r1
 892:	70 f0       	brcs	.+28     	; 0x8b0 <__mulsf3_pse+0x9c>
 894:	60 cf       	rjmp	.-320    	; 0x756 <__fp_inf>
 896:	aa cf       	rjmp	.-172    	; 0x7ec <__fp_szero>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	ec f3       	brlt	.-6      	; 0x896 <__mulsf3_pse+0x82>
 89c:	98 3e       	cpi	r25, 0xE8	; 232
 89e:	dc f3       	brlt	.-10     	; 0x896 <__mulsf3_pse+0x82>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b7 95       	ror	r27
 8a8:	f7 95       	ror	r31
 8aa:	e7 95       	ror	r30
 8ac:	9f 5f       	subi	r25, 0xFF	; 255
 8ae:	c1 f7       	brne	.-16     	; 0x8a0 <__mulsf3_pse+0x8c>
 8b0:	fe 2b       	or	r31, r30
 8b2:	88 0f       	add	r24, r24
 8b4:	91 1d       	adc	r25, r1
 8b6:	96 95       	lsr	r25
 8b8:	87 95       	ror	r24
 8ba:	97 f9       	bld	r25, 7
 8bc:	08 95       	ret

000008be <round>:
 8be:	7b df       	rcall	.-266    	; 0x7b6 <__fp_splitA>
 8c0:	e0 f0       	brcs	.+56     	; 0x8fa <round+0x3c>
 8c2:	9e 37       	cpi	r25, 0x7E	; 126
 8c4:	d8 f0       	brcs	.+54     	; 0x8fc <round+0x3e>
 8c6:	96 39       	cpi	r25, 0x96	; 150
 8c8:	b8 f4       	brcc	.+46     	; 0x8f8 <round+0x3a>
 8ca:	9e 38       	cpi	r25, 0x8E	; 142
 8cc:	48 f4       	brcc	.+18     	; 0x8e0 <round+0x22>
 8ce:	67 2f       	mov	r22, r23
 8d0:	78 2f       	mov	r23, r24
 8d2:	88 27       	eor	r24, r24
 8d4:	98 5f       	subi	r25, 0xF8	; 248
 8d6:	f9 cf       	rjmp	.-14     	; 0x8ca <round+0xc>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	93 95       	inc	r25
 8e0:	95 39       	cpi	r25, 0x95	; 149
 8e2:	d0 f3       	brcs	.-12     	; 0x8d8 <round+0x1a>
 8e4:	b6 2f       	mov	r27, r22
 8e6:	b1 70       	andi	r27, 0x01	; 1
 8e8:	6b 0f       	add	r22, r27
 8ea:	71 1d       	adc	r23, r1
 8ec:	81 1d       	adc	r24, r1
 8ee:	20 f4       	brcc	.+8      	; 0x8f8 <round+0x3a>
 8f0:	87 95       	ror	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	93 95       	inc	r25
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__fp_mintl>
 8fa:	1c c0       	rjmp	.+56     	; 0x934 <__fp_mpack>
 8fc:	77 cf       	rjmp	.-274    	; 0x7ec <__fp_szero>

000008fe <__fp_mintl>:
 8fe:	88 23       	and	r24, r24
 900:	71 f4       	brne	.+28     	; 0x91e <__fp_mintl+0x20>
 902:	77 23       	and	r23, r23
 904:	21 f0       	breq	.+8      	; 0x90e <__fp_mintl+0x10>
 906:	98 50       	subi	r25, 0x08	; 8
 908:	87 2b       	or	r24, r23
 90a:	76 2f       	mov	r23, r22
 90c:	07 c0       	rjmp	.+14     	; 0x91c <__fp_mintl+0x1e>
 90e:	66 23       	and	r22, r22
 910:	11 f4       	brne	.+4      	; 0x916 <__fp_mintl+0x18>
 912:	99 27       	eor	r25, r25
 914:	0d c0       	rjmp	.+26     	; 0x930 <__fp_mintl+0x32>
 916:	90 51       	subi	r25, 0x10	; 16
 918:	86 2b       	or	r24, r22
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	2a f0       	brmi	.+10     	; 0x92a <__fp_mintl+0x2c>
 920:	9a 95       	dec	r25
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	da f7       	brpl	.-10     	; 0x920 <__fp_mintl+0x22>
 92a:	88 0f       	add	r24, r24
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret

00000934 <__fp_mpack>:
 934:	9f 3f       	cpi	r25, 0xFF	; 255
 936:	31 f0       	breq	.+12     	; 0x944 <__fp_mpack_finite+0xc>

00000938 <__fp_mpack_finite>:
 938:	91 50       	subi	r25, 0x01	; 1
 93a:	20 f4       	brcc	.+8      	; 0x944 <__fp_mpack_finite+0xc>
 93c:	87 95       	ror	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	88 0f       	add	r24, r24
 946:	91 1d       	adc	r25, r1
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__tablejump2__>:
 950:	ee 0f       	add	r30, r30
 952:	ff 1f       	adc	r31, r31

00000954 <__tablejump__>:
 954:	05 90       	lpm	r0, Z+
 956:	f4 91       	lpm	r31, Z
 958:	e0 2d       	mov	r30, r0
 95a:	09 94       	ijmp

0000095c <_exit>:
 95c:	f8 94       	cli

0000095e <__stop_program>:
 95e:	ff cf       	rjmp	.-2      	; 0x95e <__stop_program>
