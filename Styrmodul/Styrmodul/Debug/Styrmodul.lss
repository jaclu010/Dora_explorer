
Styrmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000407  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021f  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000476  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000223  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000396  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5a c0       	rjmp	.+180    	; 0xb6 <__ctors_end>
   2:	00 00       	nop
   4:	75 c0       	rjmp	.+234    	; 0xf0 <__bad_interrupt>
   6:	00 00       	nop
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__bad_interrupt>
   a:	00 00       	nop
   c:	71 c0       	rjmp	.+226    	; 0xf0 <__bad_interrupt>
   e:	00 00       	nop
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__bad_interrupt>
  12:	00 00       	nop
  14:	8b c1       	rjmp	.+790    	; 0x32c <__vector_5>
  16:	00 00       	nop
  18:	56 c1       	rjmp	.+684    	; 0x2c6 <__vector_6>
  1a:	00 00       	nop
  1c:	69 c0       	rjmp	.+210    	; 0xf0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	67 c0       	rjmp	.+206    	; 0xf0 <__bad_interrupt>
  22:	00 00       	nop
  24:	65 c0       	rjmp	.+202    	; 0xf0 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c0       	rjmp	.+198    	; 0xf0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	61 c0       	rjmp	.+194    	; 0xf0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5f c0       	rjmp	.+190    	; 0xf0 <__bad_interrupt>
  32:	00 00       	nop
  34:	5d c0       	rjmp	.+186    	; 0xf0 <__bad_interrupt>
  36:	00 00       	nop
  38:	5b c0       	rjmp	.+182    	; 0xf0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	59 c0       	rjmp	.+178    	; 0xf0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	57 c0       	rjmp	.+174    	; 0xf0 <__bad_interrupt>
  42:	00 00       	nop
  44:	55 c0       	rjmp	.+170    	; 0xf0 <__bad_interrupt>
  46:	00 00       	nop
  48:	53 c0       	rjmp	.+166    	; 0xf0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	51 c0       	rjmp	.+162    	; 0xf0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__vector_20>
  52:	00 00       	nop
  54:	4d c0       	rjmp	.+154    	; 0xf0 <__bad_interrupt>
  56:	00 00       	nop
  58:	4b c0       	rjmp	.+150    	; 0xf0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	49 c0       	rjmp	.+146    	; 0xf0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	47 c0       	rjmp	.+142    	; 0xf0 <__bad_interrupt>
  62:	00 00       	nop
  64:	45 c0       	rjmp	.+138    	; 0xf0 <__bad_interrupt>
  66:	00 00       	nop
  68:	43 c0       	rjmp	.+134    	; 0xf0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	41 c0       	rjmp	.+130    	; 0xf0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3f c0       	rjmp	.+126    	; 0xf0 <__bad_interrupt>
  72:	00 00       	nop
  74:	3d c0       	rjmp	.+122    	; 0xf0 <__bad_interrupt>
  76:	00 00       	nop
  78:	3b c0       	rjmp	.+118    	; 0xf0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	39 c0       	rjmp	.+114    	; 0xf0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	37 c0       	rjmp	.+110    	; 0xf0 <__bad_interrupt>
  82:	00 00       	nop
  84:	35 c0       	rjmp	.+106    	; 0xf0 <__bad_interrupt>
  86:	00 00       	nop
  88:	33 c0       	rjmp	.+102    	; 0xf0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	25 01       	movw	r4, r10
  8e:	50 01       	movw	r10, r0
  90:	50 01       	movw	r10, r0
  92:	50 01       	movw	r10, r0
  94:	21 01       	movw	r4, r2
  96:	50 01       	movw	r10, r0
  98:	44 01       	movw	r8, r8
  9a:	50 01       	movw	r10, r0
  9c:	50 01       	movw	r10, r0
  9e:	50 01       	movw	r10, r0
  a0:	29 01       	movw	r4, r18
  a2:	50 01       	movw	r10, r0
  a4:	50 01       	movw	r10, r0
  a6:	50 01       	movw	r10, r0
  a8:	50 01       	movw	r10, r0
  aa:	50 01       	movw	r10, r0
  ac:	30 01       	movw	r6, r0
  ae:	37 01       	movw	r6, r14
  b0:	4a 01       	movw	r8, r20
  b2:	50 01       	movw	r10, r0
  b4:	3e 01       	movw	r6, r28

000000b6 <__ctors_end>:
  b6:	11 24       	eor	r1, r1
  b8:	1f be       	out	0x3f, r1	; 63
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	d0 e4       	ldi	r29, 0x40	; 64
  be:	de bf       	out	0x3e, r29	; 62
  c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
  c2:	11 e0       	ldi	r17, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	ec ee       	ldi	r30, 0xEC	; 236
  ca:	f3 e0       	ldi	r31, 0x03	; 3
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	0b bf       	out	0x3b, r16	; 59
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x14>
  d2:	07 90       	elpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a2 30       	cpi	r26, 0x02	; 2
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0x10>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a2 e0       	ldi	r26, 0x02	; 2
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a5 30       	cpi	r26, 0x05	; 5
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	52 d1       	rcall	.+676    	; 0x392 <main>
  ee:	7c c1       	rjmp	.+760    	; 0x3e8 <_exit>

000000f0 <__bad_interrupt>:
  f0:	87 cf       	rjmp	.-242    	; 0x0 <__vectors>

000000f2 <init_motors>:



void init_motors() {
	// PWM output ports
	DDRD |= (1<<DDD5);
  f2:	55 9a       	sbi	0x0a, 5	; 10
	DDRB |= (1<<DDB4)|(1<<DDB3);
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	88 61       	ori	r24, 0x18	; 24
  f8:	84 b9       	out	0x04, r24	; 4
	// Rotation direction ports
	DDRA |= (1<<DDA0)|(1<<DDA1)|(1<<DDA2);
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	87 60       	ori	r24, 0x07	; 7
  fe:	81 b9       	out	0x01, r24	; 1
	// COM0A1:0 COM0B1:= Sets the compare mode for A and B
	// WGM02:0 Choose MAX (1) or TOP (5) as max counter value
	// CS0 bits sets the clock source
	// OCR0A compare value
	// PWM settings for the wheels
	TCCR0A |= (1<<COM0A1)|(1<<COM0B1)|(1<<WGM00);
 100:	84 b5       	in	r24, 0x24	; 36
 102:	81 6a       	ori	r24, 0xA1	; 161
 104:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01)|(1<<CS00);
 106:	85 b5       	in	r24, 0x25	; 37
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	85 bd       	out	0x25, r24	; 37
	
	// PWM settings for tower motor
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
 10c:	e0 e8       	ldi	r30, 0x80	; 128
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 6a       	ori	r24, 0xA1	; 161
 114:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11)|(1<<CS10);
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	80 83       	st	Z, r24
	
	PORTA |= (FORWARD<<LEFT)|(FORWARD<<RIGHT)|(BACKWARD<<PORTA2);	// Rotation direction wheels
 120:	82 b1       	in	r24, 0x02	; 2
 122:	83 60       	ori	r24, 0x03	; 3
 124:	82 b9       	out	0x02, r24	; 2
 126:	08 95       	ret

00000128 <set_wheel_dir>:
}

void set_wheel_dir(uint8_t dir, uint8_t side) {
	if (dir == FORWARD) {
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	99 f4       	brne	.+38     	; 0x152 <set_wheel_dir+0x2a>
		if (side == BOTH) {
 12c:	62 30       	cpi	r22, 0x02	; 2
 12e:	21 f4       	brne	.+8      	; 0x138 <set_wheel_dir+0x10>
			PORTA |= (dir<<LEFT)|(dir<<RIGHT);
 130:	82 b1       	in	r24, 0x02	; 2
 132:	83 60       	ori	r24, 0x03	; 3
 134:	82 b9       	out	0x02, r24	; 2
 136:	08 95       	ret
		} else {
			PORTA |= (dir<<side);
 138:	22 b1       	in	r18, 0x02	; 2
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <set_wheel_dir+0x1e>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <set_wheel_dir+0x1a>
 14a:	ba 01       	movw	r22, r20
 14c:	62 2b       	or	r22, r18
 14e:	62 b9       	out	0x02, r22	; 2
 150:	08 95       	ret
		}
	} else {
		if (side == BOTH) {
 152:	62 30       	cpi	r22, 0x02	; 2
 154:	39 f4       	brne	.+14     	; 0x164 <set_wheel_dir+0x3c>
			PORTA &= (dir<<LEFT)|(dir<<RIGHT);
 156:	92 b1       	in	r25, 0x02	; 2
 158:	68 2f       	mov	r22, r24
 15a:	66 0f       	add	r22, r22
 15c:	86 2b       	or	r24, r22
 15e:	89 23       	and	r24, r25
 160:	82 b9       	out	0x02, r24	; 2
 162:	08 95       	ret
		} else if (side == RIGHT) {
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	31 f4       	brne	.+12     	; 0x174 <set_wheel_dir+0x4c>
			PORTA &= (dir<<side)|(1<<LEFT);
 168:	92 b1       	in	r25, 0x02	; 2
 16a:	88 0f       	add	r24, r24
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	89 23       	and	r24, r25
 170:	82 b9       	out	0x02, r24	; 2
 172:	08 95       	ret
		} else {
			PORTA &= (dir<<side)|(1<<RIGHT);
 174:	22 b1       	in	r18, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <set_wheel_dir+0x58>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <set_wheel_dir+0x54>
 184:	ba 01       	movw	r22, r20
 186:	62 60       	ori	r22, 0x02	; 2
 188:	62 23       	and	r22, r18
 18a:	62 b9       	out	0x02, r22	; 2
 18c:	08 95       	ret

0000018e <uart_init>:
#include <avr/io.h>
#include "uart.h"

void uart_init() {
	unsigned int baud = 15;
	UBRR0 = 0;
 18e:	e4 ec       	ldi	r30, 0xC4	; 196
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	11 82       	std	Z+1, r1	; 0x01
 194:	10 82       	st	Z, r1
	
	// Port 0, UART
	UCSR0A |= (1 << U2X0); // Double transmission rate
 196:	a0 ec       	ldi	r26, 0xC0	; 192
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	8c 91       	ld	r24, X
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	8c 93       	st	X, r24
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0)|(1<<RXCIE0); // Enables receive, transmit and receive interrupt
 1a0:	a1 ec       	ldi	r26, 0xC1	; 193
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	8c 91       	ld	r24, X
 1a6:	88 69       	ori	r24, 0x98	; 152
 1a8:	8c 93       	st	X, r24
	
	UBRR0 = baud; //
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	91 83       	std	Z+1, r25	; 0x01
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <uart_send>:
}

void uart_send(unsigned data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 1b4:	e0 ec       	ldi	r30, 0xC0	; 192
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	90 81       	ld	r25, Z
 1ba:	95 ff       	sbrs	r25, 5
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <uart_send+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1be:	80 93 c6 00 	sts	0x00C6, r24
 1c2:	08 95       	ret

000001c4 <__vector_20>:

bool read_speed = false;
sideState side = NONE;
//uint8_t startBytes = 0;

ISR(USART0_RX_vect) {
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	char rec_byte = UDR0;
 1ea:	80 91 c6 00 	lds	r24, 0x00C6

	if (read_speed) {
 1ee:	90 91 04 01 	lds	r25, 0x0104
 1f2:	99 23       	and	r25, r25
 1f4:	e1 f0       	breq	.+56     	; 0x22e <__vector_20+0x6a>
		switch (side) {
 1f6:	90 91 00 01 	lds	r25, 0x0100
 1fa:	91 30       	cpi	r25, 0x01	; 1
 1fc:	41 f0       	breq	.+16     	; 0x20e <__vector_20+0x4a>
 1fe:	28 f0       	brcs	.+10     	; 0x20a <__vector_20+0x46>
 200:	92 30       	cpi	r25, 0x02	; 2
 202:	69 f0       	breq	.+26     	; 0x21e <__vector_20+0x5a>
 204:	93 30       	cpi	r25, 0x03	; 3
 206:	29 f0       	breq	.+10     	; 0x212 <__vector_20+0x4e>
 208:	0c c0       	rjmp	.+24     	; 0x222 <__vector_20+0x5e>
			case LEFT_SIDE:
				LEFT_SPEED = rec_byte;
 20a:	87 bd       	out	0x27, r24	; 39
				break;
 20c:	0a c0       	rjmp	.+20     	; 0x222 <__vector_20+0x5e>
			case RIGHT_SIDE:
				RIGHT_SPEED = rec_byte;
 20e:	88 bd       	out	0x28, r24	; 40
				break;
 210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_20+0x5e>
			case TOWER:
				LASER_SPEED = rec_byte;
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 89 00 	sts	0x0089, r25
 218:	80 93 88 00 	sts	0x0088, r24
				break;
 21c:	02 c0       	rjmp	.+4      	; 0x222 <__vector_20+0x5e>
			case BOTH_SIDES:
				LEFT_SPEED = rec_byte;
 21e:	87 bd       	out	0x27, r24	; 39
				RIGHT_SPEED = rec_byte;
 220:	88 bd       	out	0x28, r24	; 40
				break;
			default:
				break;
		}	
		side = NONE;
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	80 93 00 01 	sts	0x0100, r24
		read_speed = false;
 228:	10 92 04 01 	sts	0x0104, r1
 22c:	39 c0       	rjmp	.+114    	; 0x2a0 <__vector_20+0xdc>
	} else {
		switch (rec_byte) {
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	e2 56       	subi	r30, 0x62	; 98
 234:	f1 09       	sbc	r31, r1
 236:	e5 31       	cpi	r30, 0x15	; 21
 238:	f1 05       	cpc	r31, r1
 23a:	90 f5       	brcc	.+100    	; 0x2a0 <__vector_20+0xdc>
 23c:	ea 5b       	subi	r30, 0xBA	; 186
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	cd c0       	rjmp	.+410    	; 0x3dc <__tablejump2__>
			case 'f':
				set_wheel_dir(FORWARD,BOTH);
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	70 df       	rcall	.-288    	; 0x128 <set_wheel_dir>
				break;
 248:	2b c0       	rjmp	.+86     	; 0x2a0 <__vector_20+0xdc>
			case 'b':
				set_wheel_dir(BACKWARD,BOTH);
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	6c df       	rcall	.-296    	; 0x128 <set_wheel_dir>
				break;
 250:	27 c0       	rjmp	.+78     	; 0x2a0 <__vector_20+0xdc>
			case 'l':
				set_wheel_dir(FORWARD,RIGHT);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	68 df       	rcall	.-304    	; 0x128 <set_wheel_dir>
				set_wheel_dir(BACKWARD,LEFT);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	65 df       	rcall	.-310    	; 0x128 <set_wheel_dir>
				break;
 25e:	20 c0       	rjmp	.+64     	; 0x2a0 <__vector_20+0xdc>
			case 'r':
				set_wheel_dir(FORWARD,LEFT);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	61 df       	rcall	.-318    	; 0x128 <set_wheel_dir>
				set_wheel_dir(BACKWARD,RIGHT);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	5e df       	rcall	.-324    	; 0x128 <set_wheel_dir>
				break;
 26c:	19 c0       	rjmp	.+50     	; 0x2a0 <__vector_20+0xdc>
			case 's':
				side = BOTH_SIDES;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 93 00 01 	sts	0x0100, r24
				read_speed = true;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 04 01 	sts	0x0104, r24
				break;
 27a:	12 c0       	rjmp	.+36     	; 0x2a0 <__vector_20+0xdc>
			case 'v':
				side = LEFT_SIDE;
 27c:	10 92 00 01 	sts	0x0100, r1
				read_speed = true;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 04 01 	sts	0x0104, r24
				break;
 286:	0c c0       	rjmp	.+24     	; 0x2a0 <__vector_20+0xdc>
			case 'h':
				side = RIGHT_SIDE;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 00 01 	sts	0x0100, r24
				read_speed = true;
 28e:	80 93 04 01 	sts	0x0104, r24
				break;
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <__vector_20+0xdc>
			case 't':
				side = TOWER;
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	80 93 00 01 	sts	0x0100, r24
				read_speed = true;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 04 01 	sts	0x0104, r24
				break;
		}
	}
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_6>:

bool hall_left_activated = false;

ISR(PCINT2_vect) {
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	0b b6       	in	r0, 0x3b	; 59
 2d2:	0f 92       	push	r0
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	if (!hall_left_activated) {
 2ec:	80 91 03 01 	lds	r24, 0x0103
 2f0:	81 11       	cpse	r24, r1
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <__vector_6+0x3c>
		uart_send(0x5F);
 2f4:	8f e5       	ldi	r24, 0x5F	; 95
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	5d df       	rcall	.-326    	; 0x1b4 <uart_send>
		hall_left_activated = true;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 03 01 	sts	0x0103, r24
 300:	02 c0       	rjmp	.+4      	; 0x306 <__vector_6+0x40>
	} else {
		hall_left_activated = false;
 302:	10 92 03 01 	sts	0x0103, r1
	}
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0b be       	out	0x3b, r0	; 59
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_5>:

bool hall_right_activated = false;

ISR(PCINT1_vect) {
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	0b b6       	in	r0, 0x3b	; 59
 338:	0f 92       	push	r0
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	if (!hall_right_activated) {
 352:	80 91 02 01 	lds	r24, 0x0102
 356:	81 11       	cpse	r24, r1
 358:	07 c0       	rjmp	.+14     	; 0x368 <__vector_5+0x3c>
		uart_send(0x60);
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	2a df       	rcall	.-428    	; 0x1b4 <uart_send>
		hall_right_activated = true;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 02 01 	sts	0x0102, r24
 366:	02 c0       	rjmp	.+4      	; 0x36c <__vector_5+0x40>
		} else {
		hall_right_activated = false;
 368:	10 92 02 01 	sts	0x0102, r1
		}
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0b be       	out	0x3b, r0	; 59
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <main>:


int main(void) {
	init_motors();
 392:	af de       	rcall	.-674    	; 0xf2 <init_motors>
	
	LEFT_SPEED = 0; // LEFT
 394:	17 bc       	out	0x27, r1	; 39
	RIGHT_SPEED = 0; // RIGHT
 396:	18 bc       	out	0x28, r1	; 40
	
	LASER_SPEED = 0;
 398:	10 92 89 00 	sts	0x0089, r1
 39c:	10 92 88 00 	sts	0x0088, r1
	
	DDRC &= ~(1<<DDC0);		// set pin C0 to input
 3a0:	38 98       	cbi	0x07, 0	; 7
	DDRB &= ~(1<<DDB1);
 3a2:	21 98       	cbi	0x04, 1	; 4
	PORTC |= (1<<PORTC0);	// activate pull-up resistor
 3a4:	40 9a       	sbi	0x08, 0	; 8
	PORTB |= (1<<PORTB1);
 3a6:	29 9a       	sbi	0x05, 1	; 5
	
	PCMSK2 |= (1<<PCINT16);	// enable PCINT2
 3a8:	ed e6       	ldi	r30, 0x6D	; 109
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2);	// activate interrupts on PCNIT23-16
 3b2:	e8 e6       	ldi	r30, 0x68	; 104
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	80 83       	st	Z, r24
	
	PCMSK1 |= (1<<PCINT9);
 3bc:	ac e6       	ldi	r26, 0x6C	; 108
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	8c 91       	ld	r24, X
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	8c 93       	st	X, r24
	PCICR |= (1<<PCIE1);
 3c6:	80 81       	ld	r24, Z
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	80 83       	st	Z, r24
	
	EICRA |= (1<<ISC21);	// enable interrupt on falling edge
 3cc:	e9 e6       	ldi	r30, 0x69	; 105
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	80 62       	ori	r24, 0x20	; 32
 3d4:	80 83       	st	Z, r24
	//EIMSK |= (1<<INT2); // NO NEED ?? ?? ??
	//EIMSK |= (1<<INT1);
	uart_init();
 3d6:	db de       	rcall	.-586    	; 0x18e <uart_init>
	sei();	// enable interrupts
 3d8:	78 94       	sei
 3da:	ff cf       	rjmp	.-2      	; 0x3da <main+0x48>

000003dc <__tablejump2__>:
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31

000003e0 <__tablejump__>:
 3e0:	05 90       	lpm	r0, Z+
 3e2:	f4 91       	lpm	r31, Z
 3e4:	e0 2d       	mov	r30, r0
 3e6:	09 94       	ijmp

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
